"""
–í–µ–±-–¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
–ó–∞–ø—É—Å–∫: streamlit run app.py
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Ñ—ñ–ª—å–º—ñ–≤",
    page_icon="üé¨",
    layout="wide"
)

# –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
@st.cache_data
def load_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ"""
    ratings = pd.read_csv('data/processed/ratings.csv')
    movies = pd.read_csv('data/processed/movies.csv')
    users = pd.read_csv('data/processed/users.csv')
    return ratings, movies, users

@st.cache_data
def create_matrices(ratings):
    """–°—Ç–≤–æ—Ä—é—î –º–∞—Ç—Ä–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á-—Ñ—ñ–ª—å–º"""
    matrix = ratings.pivot_table(
        index='user_id',
        columns='item_id',
        values='rating',
        fill_value=0
    )
    return matrix

@st.cache_data
def compute_similarity(matrix):
    """–û–±—á–∏—Å–ª—é—î –ø–æ–¥—ñ–±–Ω—ñ—Å—Ç—å –º—ñ–∂ —Ñ—ñ–ª—å–º–∞–º–∏"""
    item_similarity = cosine_similarity(matrix.T)
    return item_similarity

# Item-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
def get_item_based_recommendations(user_id, matrix, item_similarity, movies, n=10):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–æ–ø-N —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    if user_id not in matrix.index:
        return None
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ü—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_ratings = matrix.loc[user_id]
    
    # –§—ñ–ª—å–º–∏ —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –æ—Ü—ñ–Ω–∏–≤
    rated_items = user_ratings[user_ratings > 0].index.tolist()
    
    if len(rated_items) == 0:
        return None
    
    # –û–±—á–∏—Å–ª—é—î–º–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –Ω–µ–æ—Ü—ñ–Ω–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤
    predictions = {}
    
    for item_id in matrix.columns:
        if item_id in rated_items:
            continue
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å —Ñ—ñ–ª—å–º—É
        item_idx = matrix.columns.get_loc(item_id)
        
        # –ü–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ –¥–æ –≤—Å—ñ—Ö —Ñ—ñ–ª—å–º—ñ–≤
        similarities = item_similarity[item_idx]
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Ü—ñ–Ω–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏
        rated_mask = user_ratings > 0
        similarities_rated = similarities[rated_mask.values]
        ratings_rated = user_ratings[rated_mask].values
        
        if len(similarities_rated) == 0:
            continue
        
        # –í–∏–±–∏—Ä–∞—î–º–æ —Ç–æ–ø-20 –Ω–∞–π—Å—Ö–æ–∂—ñ—à–∏—Ö
        k = min(20, len(similarities_rated))
        top_k_idx = np.argsort(similarities_rated)[-k:]
        top_similarities = similarities_rated[top_k_idx]
        top_ratings = ratings_rated[top_k_idx]
        
        if top_similarities.sum() == 0:
            continue
        
        # –ó–≤–∞–∂–µ–Ω–µ —Å–µ—Ä–µ–¥–Ω—î
        pred = np.dot(top_similarities, top_ratings) / top_similarities.sum()
        predictions[item_id] = pred
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é
    top_items = sorted(predictions.items(), key=lambda x: x[1], reverse=True)[:n]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—ñ–ª—å–º–∏
    recommendations = []
    for item_id, pred_rating in top_items:
        movie_info = movies[movies['item_id'] == item_id].iloc[0]
        
        # –ñ–∞–Ω—Ä–∏
        genre_cols = ['Action', 'Adventure', 'Animation', 'Children', 'Comedy',
                      'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir',
                      'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi',
                      'Thriller', 'War', 'Western']
        
        genres = [col for col in genre_cols if movie_info[col] == 1]
        
        recommendations.append({
            'title': movie_info['title'],
            'predicted_rating': pred_rating,
            'genres': ', '.join(genres) if genres else 'Unknown'
        })
    
    return recommendations

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_history(user_id, ratings, movies, n=10):
    """–ü–æ–∫–∞–∑—É—î —ñ—Å—Ç–æ—Ä—ñ—é –æ—Ü—ñ–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_ratings = ratings[ratings['user_id'] == user_id].copy()
    user_ratings = user_ratings.merge(movies[['item_id', 'title']], on='item_id')
    user_ratings = user_ratings.sort_values('rating', ascending=False).head(n)
    return user_ratings[['title', 'rating']]

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    st.title("üé¨ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Ñ—ñ–ª—å–º—ñ–≤")
    st.markdown("---")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    with st.spinner("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö..."):
        ratings, movies, users = load_data()
        matrix = create_matrices(ratings)
        item_similarity = compute_similarity(matrix)
    
    # Sidebar
    st.sidebar.header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    
    # –í–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = st.sidebar.selectbox(
        "–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
        options=sorted(matrix.index.tolist()),
        index=0
    )
    
    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    n_recommendations = st.sidebar.slider(
        "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:",
        min_value=5,
        max_value=20,
        value=10
    )
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    st.sidebar.markdown("---")
    st.sidebar.subheader("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    user_info = users[users['user_id'] == user_id].iloc[0]
    num_ratings = len(ratings[ratings['user_id'] == user_id])
    avg_rating = ratings[ratings['user_id'] == user_id]['rating'].mean()
    
    st.sidebar.write(f"**ID:** {user_id}")
    st.sidebar.write(f"**–í—ñ–∫:** {user_info['age']}")
    st.sidebar.write(f"**–°—Ç–∞—Ç—å:** {'–ß–æ–ª–æ–≤—ñ–∫' if user_info['gender'] == 'M' else '–ñ—ñ–Ω–∫–∞'}")
    st.sidebar.write(f"**–ü—Ä–æ—Ñ–µ—Å—ñ—è:** {user_info['occupation']}")
    st.sidebar.write(f"**–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫:** {num_ratings}")
    st.sidebar.write(f"**–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞:** {avg_rating:.2f}")
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ü—ñ–Ω–æ–∫")
        st.write("–¢–æ–ø-10 –Ω–∞–π–≤–∏—â–µ –æ—Ü—ñ–Ω–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤:")
        
        history = get_user_history(user_id, ratings, movies, n=10)
        
        if len(history) > 0:
            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            history_display = history.copy()
            history_display['rating'] = history_display['rating'].apply(lambda x: '‚≠ê' * int(x))
            
            st.dataframe(
                history_display,
                column_config={
                    "title": st.column_config.TextColumn("–ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É", width="large"),
                    "rating": st.column_config.TextColumn("–û—Ü—ñ–Ω–∫–∞", width="small"),
                },
                hide_index=True,
                use_container_width=True
            )
        else:
            st.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –æ—Ü—ñ–Ω–∏–≤ –∂–æ–¥–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É")
    
    with col2:
        st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π..."):
            recommendations = get_item_based_recommendations(
                user_id, matrix, item_similarity, movies, n=n_recommendations
            )
        
        if recommendations:
            st.write(f"–¢–æ–ø-{n_recommendations} —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤:")
            
            for i, rec in enumerate(recommendations, 1):
                with st.container():
                    st.markdown(f"**{i}. {rec['title']}**")
                    
                    col_a, col_b = st.columns([1, 3])
                    with col_a:
                        st.write(f"–û—Ü—ñ–Ω–∫–∞: {rec['predicted_rating']:.2f} ‚≠ê")
                    with col_b:
                        st.write(f"–ñ–∞–Ω—Ä–∏: {rec['genres']}")
                    
                    st.markdown("---")
        else:
            st.warning("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏
    st.markdown("---")
    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", f"{len(users):,}")
    
    with col2:
        st.metric("–§—ñ–ª—å–º—ñ–≤", f"{len(movies):,}")
    
    with col3:
        st.metric("–û—Ü—ñ–Ω–æ–∫", f"{len(ratings):,}")
    
    with col4:
        sparsity = (1 - len(ratings) / (len(users) * len(movies))) * 100
        st.metric("–†–æ–∑—Ä—ñ–¥–∂–µ–Ω—ñ—Å—Ç—å", f"{sparsity:.1f}%")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è –ü—Ä–æ —Å–∏—Å—Ç–µ–º—É"):
        st.markdown("""
        ### –ü—Ä–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω—É —Å–∏—Å—Ç–µ–º—É
        
        –¶—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **Item-based Collaborative Filtering** –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —Ñ—ñ–ª—å–º—ñ–≤.
        
        **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**
        1. –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª—ñ–∑—É—î —Å—Ö–æ–∂—ñ—Å—Ç—å –º—ñ–∂ —Ñ—ñ–ª—å–º–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–æ–≥–æ, —è–∫ —ó—Ö –æ—Ü—ñ–Ω—é–≤–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        2. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ñ—ñ–ª—å–º–∏ —Å—Ö–æ–∂—ñ –Ω–∞ —Ç—ñ, —â–æ –≤—ñ–Ω –æ—Ü—ñ–Ω–∏–≤ –≤–∏—Å–æ–∫–æ
        3. –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –∑ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏–º–∏ –æ—Ü—ñ–Ω–∫–∞–º–∏
        
        **–î–∞—Ç–∞—Å–µ—Ç:** MovieLens 100K
        - 943 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        - 1,682 —Ñ—ñ–ª—å–º–∏
        - 100,000 –æ—Ü—ñ–Ω–æ–∫
        
        **–¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ:**
        - RMSE: 0.9714
        - MAE: 0.7591
        
        **–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó:** Python, Pandas, Scikit-learn, Streamlit
        """)

if __name__ == "__main__":
    main()